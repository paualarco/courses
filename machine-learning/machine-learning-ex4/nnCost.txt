function [J grad] = nnCostFunction(nn_params, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, ...
                                   X, y, lambda)
%NNCOSTFUNCTION Implements the neural network cost function for a two layer
%neural network which performs classification
%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the cost and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.
%

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network
num_labels
sizeX = size(X);
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));
sizeT1 = size(Theta1);
Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));
sizeT2 = size(Theta2);

% Setup some useful variables
m = size(X, 1);

% You need to return the following variables correctly 
J = 0;
Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2));

% ====================== YOUR CODE HERE ======================
% Instructions: You should complete the code by working through the
%               following parts.
%
% Part 1: Feedforward the neural network and return the cost in the
%         variable J. After implementing Part 1, you can verify that your
%         cost function computation is correct by verifying the cost
%         computed in ex4.m
%

X = [ones(size(X)(1),1),X];
sizeX = size(X);
z1=X*transpose(Theta1);
a1 = sigmoid(z1);

sizeA1 = size(a1);
a1 = [ones(size(a1)(1),1),a1];
z2 = a1*transpose(Theta2);
a2 = sigmoid(z2);

sizeA2 = size(a2);
sizey = size(y);
Y=zeros(size(y)(1), num_labels);

%for i= 1:size(Y)(1)
 % if y(i)==num_labels
 %   Y(i,1) = 1;
 % else Y(i,y(i)+1) = 1;
 % endif
%endfor
for i= 1:size(Y)(1)
  Y(i,y(i)) = 1;
endfor
sizeY = size(Y);

J = (sum(sum((-Y.*log(a2))-((1-Y).*log(1-a2)))))/m;
  
sizeJ = size(J);
val1= (Theta1);
val2=(Theta2);
val1(:,1) = zeros(size(val1)(1),1);
val2(:,1) = zeros(size(val2)(1),1);

val1 = sum(sum(val1.^2));
val2 = sum(sum(val2.^2));
regVal = (lambda/(2*m))*(val1+val2);

J=J+regVal;


% Part 2: Implement the backpropagation algorithm to compute the gradients
%         Theta1_grad and Theta2_grad. You should return the partial derivatives of
%         the cost function with respect to Theta1 and Theta2 in Theta1_grad and
%         Theta2_grad, respectively. After implementing Part 2, you can check
%         that your implementation is correct by running checkNNGradients
%
%         Note: The vector y passed into the function is a vector of labels
%               containing values from 1..K. You need to map this vector into a 
%               binary vector of 1's and 0's to be used with the neural network
%               cost function.
%
%         Hint: We recommend implementing backpropagation using a for-loop
%               over the training examples if you are implementing it for the 
%               first time.
%
APEN = zeros(size(transpose(Theta2))(1),1);


sizea2 = size(a2);% 5000 10
sizeY = size(Y);% 5000 10

for i= 1:m
sizeA2 = size(a2); % 5000  10
sizeY = size(Y);% 5000   10

delta3L = (a2 - Y);



%d2 = (transpose(Theta2)*transpose(d3))*sigmoidGradient(z2)
size(sigmoidGradient(z2))
delta2L =  (transpose(Theta2)*transpose(delta3L))*sigmoidGradient(z2);
size_Theta2= size(Theta2)%  10   26
size_Delta3= size(delta3L)% 5000    10?
sizes_Delta2 = size(delta2L) % 25   10
delta2L = delta2L(2:end,1:end);
sizes_Delta2 = size(delta2L) % 25   10
sizeA2 = size(a2) % 5000  10

sizeA1 = size(a1)% 5000     25
a1 = a1(1:end,2:end);

%delta2L = delta2L(2:end,1:end);
sizeTheta1= size(Theta1)%  
sizeUnrolled_Theta1 = size(Theta1(1:end,2:end));
Theta1_grad =a1 *delta2L;
size_Theta1_grad = size(Theta1_grad)

Theta2_grad = transpose(delta3L) * a2 ;
size(Theta2_grad)
%size_Theta2_grad = size(Theta2_grad)

APEN = [APEN,add];
sizeAL2= size(APEN);
endfor

grad = APEN./m;
sizegrad = size(grad)

% Part 3: Implement regularization with the cost function and gradients.
%
%         Hint: You can implement this around the code for
%               backpropagation. That is, you can compute the gradients for
%               the regularization separately and then add them to Theta1_grad
%               and Theta2_grad from Part 2.
%



















% -------------------------------------------------------------

% =========================================================================

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)];


end
